name: Publish and Create Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libicu-dev

      # Configure and build
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON

      - name: Build
        run: |
          cd build
          cmake --build . --config Release --parallel

      # Run tests
      - name: Run tests
        run: |
          cd build
          ctest -C Release --output-on-failure

      # Build prebuilt binaries for Linux
      - name: Build prebuilt binaries for Linux
        run: |
          mkdir -p build-prebuilt
          cd build-prebuilt
          cmake .. -DSTATIC=ON -DBUILD_TESTING=OFF
          cmake --build . --target suzume_feedmill_cli --config Release --parallel

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            # Suzume Feedmill ${{ github.ref_name }}

            Automated release for Suzume Feedmill ${{ github.ref_name }}.

            ## Features

            - High-performance text normalization
            - PMI calculation
            - Word extraction
            - Cross-platform support (Linux, macOS, Windows)
            - WebAssembly support for browsers and Node.js

            ## Installation

            Download the prebuilt binary for your platform or build from source.

            ### WebAssembly

            The WebAssembly module is available in the release assets. Download `suzume-feedmill-wasm.zip` and include it in your web or Node.js project.

          files: |
            build-prebuilt/suzume-feedmill
            build-prebuilt/bin/suzume-feedmill
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies
      - name: Install dependencies
        run: |
          brew update
          brew install cmake icu4c
          echo "PKG_CONFIG_PATH=$(brew --prefix icu4c)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix icu4c)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix icu4c)/include" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix icu4c)" >> $GITHUB_ENV

      # Build prebuilt binaries for macOS
      - name: Build prebuilt binaries for macOS
        run: |
          mkdir -p build-prebuilt
          cd build-prebuilt
          cmake .. -DSTATIC=ON -DBUILD_TESTING=OFF
          cmake --build . --target suzume_feedmill_cli --config Release --parallel

      # Upload artifacts
      - name: Upload macOS binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            build-prebuilt/bin/suzume-feedmill
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies
      - name: Install dependencies
        run: |
          choco install cmake -y
          vcpkg install icu:x64-windows
          echo "CMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
          echo "VCPKG_INSTALLATION_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV

      # Build prebuilt binaries for Windows
      - name: Build prebuilt binaries for Windows
        run: |
          mkdir -p build-prebuilt
          cd build-prebuilt
          cmake .. -DSTATIC=ON -DBUILD_TESTING=OFF -DCMAKE_TOOLCHAIN_FILE="$env:CMAKE_TOOLCHAIN_FILE"
          cmake --build . --target suzume_feedmill_cli --config Release --parallel

      # Upload artifacts
      - name: Upload Windows binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            build-prebuilt/Release/suzume-feedmill.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libicu-dev nodejs npm zip

      # Setup Emscripten
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v12
        with:
          version: latest
          actions-cache-folder: "emsdk-cache"

      # Verify Emscripten installation
      - name: Verify Emscripten
        run: |
          emcc --version

      # Build WebAssembly module
      - name: Build WebAssembly module
        run: |
          mkdir -p build-wasm
          cd build-wasm
          emcmake cmake .. -DBUILD_WASM=ON -DCMAKE_BUILD_TYPE=Release
          emmake make -j$(nproc)

      # Create wasm directory and copy files
      - name: Prepare WebAssembly files
        run: |
          mkdir -p wasm
          cp build-wasm/suzume-feedmill.js wasm/
          cp build-wasm/suzume-feedmill.wasm wasm/

          # Copy example files from repository
          cp examples/wasm-example.html wasm/example.html
          cp examples/wasm-example.js wasm/example.js
          cp examples/wasm-readme.md wasm/README.md

          # Create Japanese version directory
          mkdir -p wasm/ja
          cp examples/ja/wasm-example.html wasm/ja/example.html
          cp examples/ja/wasm-example.js wasm/ja/example.js
          cp examples/ja/wasm-readme.md wasm/ja/README.md

          # Create a zip file
          cd wasm
          zip -r ../suzume-feedmill-wasm.zip .
          cd ..

      # Test WebAssembly module
      - name: Test WebAssembly module
        run: |
          chmod +x scripts/test-wasm.js
          node scripts/test-wasm.js

      # Upload WebAssembly artifacts to release
      - name: Upload WebAssembly artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            suzume-feedmill-wasm.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
