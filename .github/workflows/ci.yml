name: CI

on:
  push:
    branches: [main, master]
    tags-ignore:
      - "v*.*.*"
    paths-ignore:
      - "*.md"
      - ".github/**"
      - ".gitignore"
      - ".gitattributes"
      - ".vscode/**"
      - "examples/**"
  pull_request:
    branches: [main, master]
    paths-ignore:
      - "*.md"
      - ".github/**"
      - ".gitignore"
      - ".gitattributes"
      - ".vscode/**"
      - "examples/**"
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies based on OS
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build ccache libicu-dev libgtest-dev libgmock-dev

          # Build and install GTest/GMock from source if needed
          if [ ! -f /usr/lib/libgmock.a ] && [ ! -f /usr/lib/x86_64-linux-gnu/libgmock.a ]; then
            echo "Building GTest/GMock from source"
            cd /usr/src/googletest
            sudo cmake .
            sudo cmake --build . --parallel
            sudo cmake --install .
          fi

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake ninja ccache icu4c
          echo "Adding icu4c to PKG_CONFIG_PATH and other environment variables"
          echo "PKG_CONFIG_PATH=$(brew --prefix icu4c)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix icu4c)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix icu4c)/include" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix icu4c)" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake ninja -y
          # For Windows, we'll use the ICU libraries from vcpkg
          vcpkg install icu:x64-windows
          echo "CMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
          # Make VCPKG_INSTALLATION_ROOT available for CMake
          echo "VCPKG_INSTALLATION_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV

      # Setup ccache
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.[ch]pp') }}
          restore-keys: ${{ runner.os }}-ccache-

      # Configure and build
      - name: Configure CMake (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON \
                   -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON -DCMAKE_TOOLCHAIN_FILE="$env:CMAKE_TOOLCHAIN_FILE"

      - name: Build
        run: |
          cd build
          ninja -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)

      # Run tests
      - name: Run tests (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd build
          ctest -C Release --output-on-failure

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          ctest -C Release --output-on-failure

      # Create prebuilt binaries
      - name: Create prebuilt binaries
        run: |
          mkdir -p build-prebuilt
          cd build-prebuilt
          cmake .. -DSTATIC=ON -DBUILD_TESTING=OFF
          cmake --build . --target suzume_feedmill_cli --config Release --parallel

      # Upload artifacts
      - name: Upload prebuilt binaries
        uses: actions/upload-artifact@v4
        with:
          name: suzume-feedmill-${{ matrix.os }}
          path: |
            build-prebuilt/bin/suzume_feedmill_cli*
            build-prebuilt/Release/suzume_feedmill_cli*
            build-prebuilt/suzume-feedmill*
            build-prebuilt/Release/suzume-feedmill*

  build-and-test-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build ccache libicu-dev nodejs npm

      # Setup ccache for WebAssembly build
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.[ch]pp') }}
          restore-keys: ${{ runner.os }}-ccache-

      # Setup Emscripten
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v12
        with:
          version: "3.1.45" # Specify a fixed version for stability
          no-cache: false # Enable caching
          no-install: false # Force fresh installation

      # Verify and setup Emscripten environment
      - name: Verify and setup Emscripten
        run: |
          source "$EMSDK/emsdk_env.sh"
          emcc --version
          echo "EMSCRIPTEN_ROOT=$EMSCRIPTEN_ROOT" >> $GITHUB_ENV

      # Build WebAssembly module
      - name: Build WebAssembly module
        run: |
          source "$EMSDK/emsdk_env.sh"
          mkdir -p build-wasm && cd build-wasm
          # Build with default options (flags are set in CMakeLists.txt)
          emcmake cmake .. -GNinja -DBUILD_WASM=ON -DCMAKE_BUILD_TYPE=Release \
                         -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                         -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          ninja -j$(nproc)

          # Check if build was successful (SINGLE_FILE=1 mode only produces .js file)
          if [ -f "suzume-feedmill.js" ]; then
            echo "WebAssembly build successful"
          else
            echo "WebAssembly build failed: output file not found"
            find . -name "*.js"
            exit 1
          fi

      # Verify WebAssembly module
      - name: Verify WebAssembly module
        run: |
          ls -la build-wasm/
          if [ ! -f build-wasm/suzume-feedmill.js ]; then
            echo "WebAssembly build failed: output file not found"
            exit 1
          fi

      # Create wasm directory and copy files
      - name: Prepare for testing
        run: |
          mkdir -p wasm
          # Find and copy WebAssembly file (it might be in the root or in a subdirectory)
          find build-wasm -name "suzume-feedmill.js" -exec cp {} wasm/ \;

          # Verify file was copied
          if [ -f "wasm/suzume-feedmill.js" ]; then
            echo "WebAssembly file copied successfully"
          else
            echo "Failed to copy WebAssembly file"
            ls -la build-wasm/
            ls -la wasm/
            exit 1
          fi

      # Test WebAssembly module
      - name: Test WebAssembly module
        run: |
          source "$EMSDK/emsdk_env.sh"

          # Check if test-wasm.js exists before chmod
          if [ -f "scripts/test-wasm.js" ]; then
            chmod +x scripts/test-wasm.js

            # Set environment variables for test execution
            NODE_PATH=$PWD node scripts/test-wasm.js

            # Check test result
            if [ $? -ne 0 ]; then
              echo "WebAssembly tests failed"
              exit 1
            else
              echo "WebAssembly tests passed"
            fi
          else
            echo "Error: scripts/test-wasm.js not found"
            # Try to find the file
            find . -name "test-wasm.js"
            exit 1
          fi

      # Upload WebAssembly artifacts
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: suzume-feedmill-wasm
          path: |
            wasm/suzume-feedmill.js
